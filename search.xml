<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>centos7禁用22端口ssh和root登录</title>
    <url>/posts/centos-forbid-ssh-port.html</url>
    <content><![CDATA[<ul>
<li>前言</li>
</ul>
<p>购买了服务器后的第一件事，修改默认的ssh端口，避免被人扫描和爆破。更加安全的方法是使用证书和加密实现无密码登录，只允许使用加密密钥的计算机进行登录。</p>
<a id="more"></a>
<p>准备工作：服务器一台，root用户登录。</p>
<h2 id="禁用22端口登录"><a href="#禁用22端口登录" class="headerlink" title="禁用22端口登录"></a>禁用22端口登录</h2><h3 id="备份ssh文件"><a href="#备份ssh文件" class="headerlink" title="备份ssh文件"></a>备份ssh文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bakcp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>将端口修改为你要的值，建议在1024-65535之间，我这里改为2244</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If you want to change the port on a SELinux system, you have to tell</span></span><br><span class="line"><span class="comment"># SELinux about this change.</span></span><br><span class="line"><span class="comment"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Port 22</span><br><span class="line">Port 2244</span><br><span class="line"><span class="comment">#AddressFamily any</span></span><br><span class="line"><span class="comment">#ListenAddress 0.0.0.0</span></span><br><span class="line"><span class="comment">#ListenAddress ::</span></span><br></pre></td></tr></table></figure>
<p>保存文件，注意不要退出登录。</p>
<h3 id="SELinux允许新端口"><a href="#SELinux允许新端口" class="headerlink" title="SELinux允许新端口"></a>SELinux允许新端口</h3><ul>
<li>安装<code>semanage</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install policycoreutils-python</span><br></pre></td></tr></table></figure>
<ul>
<li>使用semanage允许新端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo semanage port -a -t ssh_port_t -p tcp 2244</span><br></pre></td></tr></table></figure>

<h3 id="防火墙允许新端口通过"><a href="#防火墙允许新端口通过" class="headerlink" title="防火墙允许新端口通过"></a>防火墙允许新端口通过</h3><ul>
<li>执行命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-port=2244/tcp</span><br></pre></td></tr></table></figure>
如果提示<code>FirewallD is not running</code>则是未开启firewall，通过如下命令开启<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>
查看防火墙状态<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者以下命令</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --state</span></span><br></pre></td></tr></table></figure></li>
<li>重新加载防火墙配置<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="重启ssh服务"><a href="#重启ssh服务" class="headerlink" title="重启ssh服务"></a>重启ssh服务</h3><ul>
<li>重启ssh服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></li>
<li>查看ssh状态，检查端口是否生效<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status sshd.service</span><br></pre></td></tr></table></figure>
成功生效出现<figure class="highlight plain"><figcaption><span>sshd.service - OpenSSH server daemon</span></figcaption><table><tr><td class="code"><pre><span class="line">Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">Active: active (running) since Sun 2020-04-12 17:22:39 CST; 23s ago</span><br></pre></td></tr></table></figure>
或者使用<code>ss -tnlp | grep ssh</code>验证ssh是否在新端口上运行</li>
</ul>
<h3 id="在服务器控制台新建安全组，允许你的端口登录"><a href="#在服务器控制台新建安全组，允许你的端口登录" class="headerlink" title="在服务器控制台新建安全组，允许你的端口登录"></a>在服务器控制台新建安全组，允许你的端口登录</h3><p><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200412181503.png" alt=""></p>
<h3 id="退出，尝试使用新端口登录"><a href="#退出，尝试使用新端口登录" class="headerlink" title="退出，尝试使用新端口登录"></a>退出，尝试使用新端口登录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@your-ip -p 2244</span><br></pre></td></tr></table></figure>

<h3 id="禁用22端口"><a href="#禁用22端口" class="headerlink" title="禁用22端口"></a>禁用22端口</h3><p>使用<code>netstat -nlpt</code>查看监听的端口，发现22端口还在。</p>
<ul>
<li>修改配置文件，注释22端口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li>
<li>重新启动ssh服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure></li>
<li>禁用22端口<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=22/tcp --permanent</span><br></pre></td></tr></table></figure></li>
<li>刷新<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意：</strong> 操作之前必须确定已经把ssh端口换成别的了，不然重启之后就尴尬了。</p>
<h3 id="测试使用22端口登录"><a href="#测试使用22端口登录" class="headerlink" title="测试使用22端口登录"></a>测试使用22端口登录</h3><p>成功禁用出现以下提示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Connecting <span class="keyword">to</span> your-server-ip:22<span class="built_in">..</span>.</span><br><span class="line">Could <span class="keyword">not</span> connect <span class="keyword">to</span> <span class="string">'your-server-ip'</span> (port 22):<span class="built_in"> Connection </span>failed.</span><br></pre></td></tr></table></figure>

<h2 id="禁止使用root用户登录"><a href="#禁止使用root用户登录" class="headerlink" title="禁止使用root用户登录"></a>禁止使用root用户登录</h2><h3 id="修改配置文件中PermitRootLogin的值"><a href="#修改配置文件中PermitRootLogin的值" class="headerlink" title="修改配置文件中PermitRootLogin的值"></a>修改配置文件中PermitRootLogin的值</h3><ul>
<li>yes 允许root登录ssh</li>
<li>no 不允许 </li>
</ul>
<h3 id="重启sshd服务"><a href="#重启sshd服务" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>

<p>普通用户登陆后可以使用<code>su -</code>进行提权。</p>
<h2 id="解决xxx-is-not-in-the-sudoers-file"><a href="#解决xxx-is-not-in-the-sudoers-file" class="headerlink" title="解决xxx is not in the sudoers file"></a>解决xxx is not in the sudoers file</h2><ul>
<li><p>创建用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd yourname</span><br><span class="line">passwd yourpassword</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置用户权限<br>解决”xxx is not in the sudoers file. This incident will be reported”，其中XXX是你的用户名，没有权限使用sudo，修改一下/etc/sudoers文件就行</p>
<ul>
<li><p>root用户登录</p>
</li>
<li><p>给文件添加写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u+w /etc/sudoers</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑/etc/sudoers文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>在下面的root下面一行<code>yourname    ALL=(ALL)       ALL</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">## Allow root <span class="keyword">to</span> run <span class="keyword">any</span> commands anywhere </span><br><span class="line"> root    <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>撤销sudoers权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p>好了，然后就达到了我们的目的了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab2016b（x64）安装教程</title>
    <url>/posts/install-matlab.html</url>
    <content><![CDATA[<ul>
<li>前言 </li>
</ul>
<p>记录下Matlab的安装教程。</p>
<a id="more"></a>


<h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><ul>
<li>下载地址：自行搜索。</li>
</ul>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul>
<li><p>打开R2016b_win64_dvd1.iso，点击setup.exe进行安装</p>
</li>
<li><p>选择使用文件安装密钥 不需要Internet连接。然后点击下一步。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323234548.png" alt=""></p>
</li>
<li><p>接受许可协议，下一步。</p>
</li>
<li><p>选择“我已有我的许可证的文件安装密钥”，输入秘钥：“09806-07443-53955-64350-21751-41297”，点击下一步<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323234844.png" alt=""></p>
</li>
<li><p>选择要安装的目录，尽量不要放到系统盘，点击下一步。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323235114.png" alt=""></p>
</li>
<li><p>选择需要安装的产品，这里建议全选，（如果懂的话选择自己需要的）点击下一步。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323235150.png" alt=""></p>
</li>
<li><p>进入“确认”页面，点击“安装”。<br>进入安装界面，安装时间很长（等待即可）。</p>
</li>
<li><p>安装完成之后，进入“产品配置说明”界面，点击下一步。</p>
</li>
<li><p>进入“安装完毕”界面，点击“完成”按钮，完成安装。</p>
</li>
</ul>
<h2 id="破解步骤"><a href="#破解步骤" class="headerlink" title="破解步骤"></a>破解步骤</h2><ul>
<li><p>解压“Matlab 2016b Win64 Crack.rar”</p>
</li>
<li><p>之后打开MATLAB 的安装目录<code>D:\Program Files\Matlab\bin\win64</code> ，点击“activate_matlab.exe”进行激活，选择“在不选择 Internet 情况下手动激活”，点击下一步<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323235957.png" alt=""></p>
</li>
<li><p>选择“输入许可证文件的完成路径（包括文件名）”，选择刚才解压的Matlab2016bWin64Crack文件夹中的许可文件“license_standalone.lic”，点击下一步。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200324000128.png" alt=""></p>
</li>
<li><p>显示“激活完成”，但是不要打开软件</p>
</li>
<li><p>进入解压的crack文件夹下的“\MATLAB Production Server\R2016b\bin\win64”中，复制四个dll文件。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200324000522.png" alt=""></p>
</li>
<li><p>之后去安装目录<code>D:\Program Files\Matlab\bin\win64</code> 文件夹下，将复制的四个 dll 文件粘贴在这个文件夹中，所有文件都选择“复制和替换”即可。</p>
</li>
<li><p>之后打开  <code>D:\Program\Matlab\bin</code> 文件夹下的 <code>matlab.exe</code>文件，就可以正常使用了。</p>
<ul>
<li>注意：每次启动都要到这里打开<code>matlab.exe</code>，所以可以创建一个快捷方式放到桌面，方便使用。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>python实现网站自动签到获取流量</title>
    <url>/posts/use-python-to-sign-in.html</url>
    <content><![CDATA[<ul>
<li>前言</li>
</ul>
<p>前段时间注册了个网站，签到送流量，每天签到也够麻烦的，好像网上有这个代码，自己太懒就动手写个爬虫，放在服务器实现自动签到，刚好把看的爬虫拿来练练手。理论适用于相同源码搭建的平台。</p>
<a id="more"></a>

<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>实现自动签到首先需要进行抓包，弄清浏览器在做出相关动作时发送的请求，这里利用的抓包工具是Fiddler。</p>
<p>通过抓包可以得到用户在登录的时候所发送的请求地址与请求协议。</p>
<ul>
<li>登录：<ul>
<li>地址：<code>https://example.com/auth/login</code></li>
<li>协议：post</li>
</ul>
</li>
<li>签到：<ul>
<li>地址 <code>https://example.com/user/checkin</code></li>
<li>协议：post</li>
</ul>
</li>
</ul>
<h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><ul>
<li>导入工具包</li>
<li>构建请求报头</li>
<li>获取session值</li>
<li>模拟登录</li>
<li>完成签到任务</li>
</ul>
<h2 id="编写python代码"><a href="#编写python代码" class="headerlink" title="编写python代码"></a>编写python代码</h2><p>代码的编写比较容易，这里直接贴出代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Check_in</span><span class="params">(emaill, passwd)</span>:</span></span><br><span class="line">    login = <span class="string">'https://example.com/auth/login'</span></span><br><span class="line">    <span class="comment"># 构建请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 登录地址</span></span><br><span class="line">    login_url = <span class="string">'https://example.com/auth/login'</span></span><br><span class="line">    <span class="comment"># 忽视verify = False的错误提示</span></span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line">    <span class="comment"># 使用Session，利用session发送get请求获得cookie</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    html = session.get(login_url, verify=<span class="literal">False</span>, headers=headers).text</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"email"</span>: emaill,</span><br><span class="line">        <span class="string">"passwd"</span>: passwd,</span><br><span class="line">        <span class="string">"code"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line">    <span class="comment">#登录到该网页</span></span><br><span class="line">    req = session.post(login_url, data=data, verify=<span class="literal">False</span>, headers=headers)</span><br><span class="line">    <span class="comment"># 签到地址</span></span><br><span class="line">    check_in = <span class="string">'https://example.com/user/checkin'</span></span><br><span class="line">    req = session.post(check_in, headers=headers)</span><br><span class="line">    print(<span class="string">"用户"</span> + emaill + <span class="string">"签到成功"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">users = [&#123;</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"emaill1@qq.com"</span>,</span><br><span class="line">    <span class="string">"passwd"</span>: <span class="string">"password"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"emaill2@163.com"</span>,</span><br><span class="line">    <span class="string">"passwd"</span>: <span class="string">"password"</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    print(user[<span class="string">'email'</span>], user[<span class="string">'passwd'</span>])</span><br><span class="line">    Check_in(user[<span class="string">'email'</span>], user[<span class="string">'passwd'</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>注意</strong><br>在发送请求的时候有个坑，因为浏览器访问该网页时需要设置证书，如果在发送请求时不设置会出现如下的错误：<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">OpenSSL.SSL.Error</span>: [('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')]</span><br><span class="line"></span><br><span class="line"><span class="attribute">urllib3.exceptions.MaxRetryError</span>: HTTPSConnectionPool(host='example.com', port=443): Max retries exceeded with url: /auth/login (Caused by SSLError(SSLError("bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')])")))</span><br><span class="line"></span><br><span class="line"><span class="attribute">requests.exceptions.SSLError</span>: HTTPSConnectionPool(host='example.com', port=443): Max retries exceeded with url: /auth/login (Caused by SSLError(SSLError("bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')])")))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>解决办法：<br>将<code>session.post(login_url, data=data, verify=False, headers=headers)</code>中的Verify需要设置为False,默认是True</p>
<p>我们可以在send函数看到默认值是True<br><code>def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):</code></p>
<p>在将verify设置为False后，运行程序虽然可以签到成功，但是会出现一个警告：<br><code>InsecureRequestWarning: Unverified HTTPS request is being made to host &#39;127.0.0.1&#39;. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  InsecureRequestWarning</code></p>
<p>我们可以在请求前添加一句代码：<code>requests.packages.urllib3.disable_warnings()</code>来忽略警告。</p>
<h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><p>定时任务可以放到服务器上自己执行，如果没有服务器，放在Linux电脑上也可以。</p>
<p>设置定时任务用到的是crontabs服务。</p>
<h3 id="编辑任务"><a href="#编辑任务" class="headerlink" title="编辑任务"></a>编辑任务</h3><p>执行<code>crontab -e</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># m h dom mon dow command</span></span><br><span class="line"><span class="section"># 定时执行python脚本，输出log,每天八点半执行一次</span></span><br><span class="line">30 8 <span class="emphasis">* *</span> * python /home/test.py &gt; /tmp/test<span class="emphasis">_cron_</span>log.txt 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="section"># 定时执行shell命令</span></span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span> <span class="emphasis">* *</span> echo "Hello world!" &gt;&gt; /tmp/test<span class="emphasis">_cron_</span>log.txt</span><br><span class="line"><span class="section"># 定时执行shell脚本,test.sh需要有执行权限</span></span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span> <span class="emphasis">* *</span> /root/test.sh &gt;&gt; /tmp/test<span class="emphasis">_cron_</span>log.txt</span><br></pre></td></tr></table></figure>
<h3 id="查看任务"><a href="#查看任务" class="headerlink" title="查看任务"></a>查看任务</h3><p>执行<code>crontab -l</code>可以查看任务，此时会打开任务文件</p>
<p>每次编辑任务后，都需要使用service cron reload命令重载任务</p>
<h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># m h dom mon dow command</span><br><span class="line">crontab 文件的格式：</span><br><span class="line">&#123;minute&#125; &#123;hour&#125; &#123;day-of-month&#125; &#123;month&#125; &#123;day-of-week&#125; &#123;full-path-to-shell-script&#125; </span><br><span class="line">o minute: 区间为 <span class="number">0</span> – <span class="number">59</span> </span><br><span class="line">o hour: 区间为<span class="number">0</span> – <span class="number">23</span> </span><br><span class="line">o day-of-month: 区间为<span class="number">0</span> – <span class="number">31</span> </span><br><span class="line">o month: 区间为<span class="number">1</span> – <span class="number">12.</span> <span class="number">1</span> 是<span class="number">1</span>月. <span class="number">12</span>是<span class="number">12</span>月. </span><br><span class="line">o Day-of-week: 区间为<span class="number">0</span> – <span class="number">7.</span> 周日可以是<span class="number">0</span>或<span class="number">7.</span></span><br></pre></td></tr></table></figure>

<p>最后，启动一下服务，就可以去做别的事情了。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网的简单介绍</title>
    <url>/posts/introduce-of-iot.html</url>
    <content><![CDATA[<ul>
<li>物联网：</li>
</ul>
<p>通过射频识别（RFID）装置、传感器、 全球定位系统等信息传感设备，按照约定的协议，把地球上的任何具体事物同互联网连接起来，并进行信息交换和通信，实现识别、定位、监控、控制和管理的一种网络。</p>
<a id="more"></a>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul>
<li>物：<ul>
<li>有相应的接收器</li>
<li>发送器</li>
<li>cpu</li>
<li>存储功能</li>
<li>操作系统</li>
<li>数据发送器</li>
<li>专门的应用程序</li>
</ul>
</li>
<li>联<ul>
<li>物物相连的互联网</li>
<li>众多传感设备连接起来并在广域网内今昔信息</li>
</ul>
</li>
<li>网<ul>
<li>基础和核心依旧是互联网，却远远超出互联网的范畴。</li>
</ul>
</li>
<li>IOT的三个特性<ul>
<li>不能简单看为互联网的延伸</li>
<li>伴随新的业务共同发展</li>
<li>包括不同的通信模式，强调M2M（man to machine |  machine to machi…. ）</li>
</ul>
</li>
</ul>
<h2 id="2-特征"><a href="#2-特征" class="headerlink" title="2. 特征"></a>2. 特征</h2><ul>
<li>全面感知 （核心）<ul>
<li>利用传感器、电子标签等环境的各个可测量特征 </li>
</ul>
</li>
<li>可靠传递<ul>
<li>数据传递的稳定性和可靠性</li>
<li>adhoc多跳上传数据</li>
<li>有线和无线</li>
<li>zigbee，lora，nbIot </li>
</ul>
</li>
<li>智能处理（研究热点）<ul>
<li>目的：智能识别跟踪，定位监控和管理等</li>
<li>云计算和人工智能对海量数据进行存储分析和处理 </li>
</ul>
</li>
</ul>
<h2 id="3-体系结构（重要）"><a href="#3-体系结构（重要）" class="headerlink" title="3. 体系结构（重要）"></a>3. 体系结构（重要）</h2><p>桂晓琳（西交）五层架构：</p>
<ul>
<li>数据存储</li>
<li>数据处理</li>
<li>通信处理</li>
<li>自动控制技术</li>
<li>标识和感知</li>
</ul>
<p>三层架构（或四层）</p>
<ul>
<li><p>海 传感器海量的感知层。<br>在感知层进行计算，也是一个研究方向</p>
<ul>
<li><p>物计算：在感知层对数据进行计算（轻量级）</p>
</li>
<li><p>雾计算：边缘计算，分担云的计算压力</p>
</li>
</ul>
</li>
<li><p>网 互联网</p>
<p> 互联网形态很多，如何整合物联网到各个网络上进行应用？</p>
<p> ngi（next generation Internet） 下一代网络<br> <a href="https://en.wikipedia.org/wiki/Next_Generation_Internet" target="_blank" rel="noopener">Wikipedia : NGI</a></p>
<p> 无线网络 LTE </p>
<p> 与互联网隔离的专用网络，保证安全</p>
<p> 需要根据每一个层次的每一个模块进行安全处理</p>
</li>
<li><p>云 应用处理层</p>
</li>
</ul>
<p>分布式云</p>
<p>服务层也常称为中间件</p>
<h2 id="4-关键技术"><a href="#4-关键技术" class="headerlink" title="4. 关键技术"></a>4. 关键技术</h2><ul>
<li><p>基础资源管理与服务 pki</p>
<ul>
<li>名称和地址（依托IPV6）</li>
<li>核心技术  </li>
</ul>
</li>
<li><p>信息获取和识别技术</p>
<ul>
<li>传感器</li>
<li>RFID</li>
<li></li>
</ul>
</li>
<li><p>组网与传输技术</p>
<ul>
<li>无线传感网</li>
<li>计算机网络</li>
</ul>
</li>
<li><p>信息处理技术</p>
<p>传统数据库无法满足信息存储需求</p>
<ul>
<li>数据挖掘</li>
<li>数据清洗</li>
<li>深度学习</li>
<li>云和虚拟化</li>
<li>…</li>
</ul>
</li>
<li><p>安全技术</p>
</li>
<li><p>物联网系统集成技术</p>
<ul>
<li>MEMS（微电机系统）</li>
<li>集感知传输预处理等功能集中在一体的节点设备</li>
<li></li>
</ul>
</li>
<li><p>共性支持技术</p>
<ul>
<li>专用操作系统和综合软件开发环境</li>
</ul>
</li>
</ul>
<h2 id="5-应用和发展趋势"><a href="#5-应用和发展趋势" class="headerlink" title="5. 应用和发展趋势"></a>5. 应用和发展趋势</h2><ul>
<li>安全防护</li>
<li>更普及的智能消费设备</li>
<li>更加关注人工智能</li>
<li>更快速的数据转化</li>
</ul>
<h2 id="6-物联网行业"><a href="#6-物联网行业" class="headerlink" title="6. 物联网行业"></a>6. 物联网行业</h2><ul>
<li>智慧家居</li>
<li>智慧农业</li>
<li>智慧医疗</li>
<li>智慧工业</li>
<li>智慧教育</li>
<li>食品安全</li>
<li>智慧城市</li>
<li>智慧交通</li>
<li>…</li>
</ul>
<p>物联网是一种趋势，更多的需要我们去探索和创造…</p>
]]></content>
      <categories>
        <category>Iot</category>
      </categories>
      <tags>
        <tag>Iot</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub和hexo搭建静态博客</title>
    <url>/posts/start-my-blog.html</url>
    <content><![CDATA[<hr>
<p> <strong>Life is a choice, Bad things happen to everybody, How you deal with it that matters.</strong></p>
<hr>
<ul>
<li>前言： </li>
<li>通过写博客将自己在生活学习中的一些知识和经验记录下来，不断地积累知识，总结经验，来记录生活吧。除此之外，更重要的是能够保持写作，在写作中保持思考…..</li>
</ul>
<a id="more"></a>


<h2 id="为何要搭建自己的博客？"><a href="#为何要搭建自己的博客？" class="headerlink" title="为何要搭建自己的博客？"></a>为何要搭建自己的博客？</h2><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>记录是一件美好的事情，而我们却常常忽略。</p>
<p>直到有一天想去回忆以前发生的事情时，却发现很多东西已经在记忆中变得模糊，当别人提及时自己甚至不曾记得它发生过。慢慢地，一切似乎都变得不重要起来。 长大了却发现时间过得太快，父母逐渐白了头发，长辈的眼睛逐渐变得浑浊，回想曾与过世的亲人相处的美好时光，那仅存的记忆却变得那么弥足珍贵。</p>
<p>记录，让时间过得慢些吧。</p>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><p>分享是一个喜悦的过程，而我们却逐渐封闭。</p>
<p>分享，让一切逐渐有意义起来。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>善于总结，乐于进步。</p>
<h2 id="如何安装Hexo博客？"><a href="#如何安装Hexo博客？" class="headerlink" title="如何安装Hexo博客？"></a>如何安装Hexo博客？</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>根据系统安装相应的版本。</p>
<p>下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></p>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>根据系统安装相应的版本。</p>
<p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在node.js和git安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h3 id="本地搭建hexo"><a href="#本地搭建hexo" class="headerlink" title="本地搭建hexo"></a>本地搭建hexo</h3><ul>
<li>新建文件夹，例如blog</li>
<li>进入该文件夹，输入hexo init </li>
<li>运行hexo s，浏览器输入localhost:4000，可看见搭建成功。</li>
</ul>
<h3 id="将博客与GitHub关联"><a href="#将博客与GitHub关联" class="headerlink" title="将博客与GitHub关联"></a>将博客与GitHub关联</h3><ul>
<li>创建一个名字为username.github.io的仓库。</li>
<li>打开blog/_config.yml，将deploy改为如下的：<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git </span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></li>
<li>运行： hexo g（生成静态文件）</li>
<li>运行：hexo d（将本地推送至GitHub）</li>
<li>打开浏览器访问<a href="http://username.github.io.git" target="_blank" rel="noopener"></a></li>
</ul>
<h3 id="博客绑定域名"><a href="#博客绑定域名" class="headerlink" title="博客绑定域名"></a>博客绑定域名</h3><p>这时博客已经搭建好，通过username.github.io即可访问，但是使用域名访问会比较好，这里是绑定域名的方法。</p>
<ul>
<li>申请域名</li>
<li>将域名解析到博客的地址。</li>
<li>为博客添加CNAME文件，内容为你的域名，如github.com。<ul>
<li>注意：这里的CNAME文件无后缀名。</li>
</ul>
</li>
<li>运行 hexo g &amp;&amp; hexo d</li>
<li>进入浏览器访问你的域名。</li>
</ul>
<h2 id="如何使用Hexo博客？"><a href="#如何使用Hexo博客？" class="headerlink" title="如何使用Hexo博客？"></a>如何使用Hexo博客？</h2><p>此时博客已经搭建完毕，下面就可以更新博客内容了。</p>
<h3 id="新建一篇博客"><a href="#新建一篇博客" class="headerlink" title="新建一篇博客"></a>新建一篇博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo n <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="启动服务预览"><a href="#启动服务预览" class="headerlink" title="启动服务预览"></a>启动服务预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="发布到站点"><a href="#发布到站点" class="headerlink" title="发布到站点"></a>发布到站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h2 id="如何进行主题美化？"><a href="#如何进行主题美化？" class="headerlink" title="如何进行主题美化？"></a>如何进行主题美化？</h2><p>网上有大量的教程，可自行搜索。</p>
<h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="插件相关"><a href="#插件相关" class="headerlink" title="插件相关"></a>插件相关</h3><p>由于hexo是静态博客，所有的文件资源都保留在本地，如果电脑坏了或者数据丢失，那就很难弄了。所以备份就十分重要了，之前我是将文件夹打包上传到云盘里面，后来才知道有个备份插件<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a>，只用一条命令就可以将博客文件备份到GitHub了。</p>
<ul>
<li><p>使用<code>hexo version</code>命令查看hexo版本。<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200323000008.png" alt=""></p>
</li>
<li><p>安装备份插件</p>
<ul>
<li><p>hexo 版本为2.0 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>hexo 版本为3.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>修改blog目录下_config.yml，添加如下配置</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">backup:</span></span><br><span class="line"><span class="symbol">type:</span> git</span><br><span class="line"><span class="meta"># 主题信息</span></span><br><span class="line"><span class="symbol">theme:</span> next</span><br><span class="line"><span class="meta"># 自定义提交信息</span></span><br><span class="line"><span class="symbol">message:</span> Back up my www.cmdxy.com blog</span><br><span class="line"><span class="meta"># 仓库名</span></span><br><span class="line"><span class="symbol">repository:</span></span><br><span class="line"><span class="symbol">  github:</span> https:<span class="comment">//github.com/iotwd/iotwd.github.io.git,backup</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>hexo backup</code>备份博客</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2></li>
</ul>
<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 中文</a></p>
<p><a href="https://thief.one/%2F2017%2F03%2F03%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%2F" target="_blank" rel="noopener">nmask’s blog 配置美化</a></p>
<p><a href="http://www.dragonstyle.win/3358042383.html" target="_blank" rel="noopener">Dragonstyle’s Home Next主题美化</a></p>
]]></content>
  </entry>
  <entry>
    <title>Windows使用cgi网络编程（python）</title>
    <url>/posts/cgi-python-windows.html</url>
    <content><![CDATA[<ul>
<li>前言</li>
</ul>
<p>python课程作业要求实现cgi访问，由于使用的是Windows10，而网上搜索的教程都是Linux/unix平台的教程。虽然不同平台上的方法大致相同，但是还是有点坑的，这里记录一下Windows平台在配置文件时的过程。</p>
<a id="more"></a>

<h2 id="查看python安装路径"><a href="#查看python安装路径" class="headerlink" title="查看python安装路径"></a>查看python安装路径</h2><p>  在cmd模式下输入<br>  <code>where python</code></p>
<p>  回车后发现安装路径为：<br>  <figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">D:<span class="symbol">\P</span>rogram Files<span class="symbol">\p</span>ython3.7<span class="symbol">\p</span>ython.exe</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\U</span>sername<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indowsApps<span class="symbol">\p</span>ython.exe</span><br></pre></td></tr></table></figure></p>
<h2 id="进入python安装路径"><a href="#进入python安装路径" class="headerlink" title="进入python安装路径"></a>进入python安装路径</h2><ul>
<li><p>切换目录</p>
<ul>
<li>输入<code>D:</code>进入D盘</li>
<li>输入<code>cd 你的路径</code>进入python安装路路径</li>
</ul>
</li>
<li><p>配置cgi-bin文件</p>
<ul>
<li>cgi-bin文件夹：存放python解释脚本（.py文件）</li>
<li>CGI文件夹：存放静态网页界面（.html）文件<br><strong>注意：</strong><ol>
<li>cgi-bin文件名最好不要修改。CGI文件夹可以为任意名，在浏览器输入时自己记住。</li>
<li>.html文件不可放在cgi-bin中，否则浏览器解释时会为文本文件。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="在python模块中使用http-server直接运行一个临时web服务器"><a href="#在python模块中使用http-server直接运行一个临时web服务器" class="headerlink" title="在python模块中使用http.server直接运行一个临时web服务器"></a>在python模块中使用http.server直接运行一个临时web服务器</h2><ul>
<li><p>在cmd中python安装文件夹输入命令:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">D</span>:\<span class="selector-tag">Program</span> <span class="selector-tag">Files</span>\<span class="selector-tag">python3</span><span class="selector-class">.7</span>&gt;<span class="selector-tag">python</span> <span class="selector-tag">-m</span> <span class="selector-tag">http</span><span class="selector-class">.server</span> <span class="selector-tag">--cgi</span></span><br></pre></td></tr></table></figure>

<p>成功会出现:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">8000</span> (http:<span class="comment">//0.0.0.0:8000/) ...</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="编辑-html文件和-py文件。可参考菜鸟教程"><a href="#编辑-html文件和-py文件。可参考菜鸟教程" class="headerlink" title="编辑.html文件和.py文件。可参考菜鸟教程"></a>编辑.html文件和.py文件。可参考<a href="https://www.runoob.com/python/python-cgi.html" target="_blank" rel="noopener">菜鸟教程</a></h2><h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><ul>
<li>输入地址</li>
</ul>
<ul>
<li><p>访问.py文件：</p>
<p> 浏览器地址栏输入</p>
 <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:8000</span>/cgi-bin/<span class="built_in">index</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问.html文件:</p>
<p> 浏览器地址栏输入</p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>localhost:<span class="number">8000</span><span class="regexp">/CGI/</span>hello_get.html</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>回车 访问成功</p>
<p> <strong>注意：</strong></p>
<ul>
<li>访问前需要开启web服务，见3。</li>
</ul>
</li>
</ul>
<p>好了，以上就是Windows10下用python运行一个cgi服务的过程。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>cgi</tag>
      </tags>
  </entry>
  <entry>
    <title>将Java web项目部署到Linux云服务器（CentOS7+Apache+Mysql）</title>
    <url>/posts/java-web-deploy-to-ecs.html</url>
    <content><![CDATA[<ul>
<li>前言<ul>
<li>CSDN上有些教程很零散，对我这种小白不友好，在这记录一下自己在部署Java web项目的过程。环境为阿里云ecs学生机 （centos7）</li>
<li>实践周的简单智慧医疗系统，需要在网页查询数据，显示一定的历史数据，使用java做后端。<a id="more"></a>


</li>
</ul>
</li>
</ul>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><h3 id="服务器安装JDK-1-8"><a href="#服务器安装JDK-1-8" class="headerlink" title="服务器安装JDK 1.8"></a>服务器安装JDK 1.8</h3><ul>
<li>终端输入以下代码。<br><code>$yum -y install java-1.8.0-openjdk java-1.8.0-openjdk-devel</code></li>
</ul>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul>
<li><p>将下面的三行添加到 /etc/profile 后面</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.232.b09-0.el7_7.x86_64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存关闭后，执行：<code>source /etc/profile</code> 让环境变量设置立即生效</p>
</li>
<li><p>验证是否安装成功，终端输入命令： <code>java -version</code></p>
</li>
</ul>
<h2 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h2><h3 id="本机电脑下载tomcat"><a href="#本机电脑下载tomcat" class="headerlink" title="本机电脑下载tomcat"></a>本机电脑下载tomcat</h3><ul>
<li><p>进入下面网址下载tomcat，最新版就可以。<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Tomcat download</a></p>
</li>
<li><p>本机安装配置tomcat环境，用以调试开发。</p>
</li>
</ul>
<h3 id="服务器下载Tomcat"><a href="#服务器下载Tomcat" class="headerlink" title="服务器下载Tomcat"></a>服务器下载Tomcat</h3><p>将tomecat.tar.gz下载到/usr/local或者先</p>
<ul>
<li>进入/user/local目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>执行以下命令<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>解压刚刚下载的文件，并且重命名为tomcat<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar zxvf apache-tomcat-8.5.47.tar.gz &amp; mv apache-tomcat-8.5.47 tomcat</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><ul>
<li><p>终端执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>出现成功的提示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Using CATALINA_BASE:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/<span class="built_in">local</span>/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64</span><br><span class="line">Using CLASSPATH:       /usr/<span class="built_in">local</span>/tomcat/bin/bootstrap.jar:/usr/<span class="built_in">local</span>/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="不能访问tomcat的相关解决办法"><a href="#不能访问tomcat的相关解决办法" class="headerlink" title="不能访问tomcat的相关解决办法"></a>不能访问tomcat的相关解决办法</h3><ul>
<li><p>防火墙未开启8080端口，解决如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器未开启安全组</p>
<ul>
<li>在阿里云服务器的控制台添加安全组，自定义tcp。端口设置为8080</li>
</ul>
</li>
</ul>
<h2 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h2><h3 id="检查-MariaDB-是否安装"><a href="#检查-MariaDB-是否安装" class="headerlink" title="检查 MariaDB 是否安装"></a>检查 MariaDB 是否安装</h3><p>从CentOS 7 开始，MariaDB 成为 yum 源中默认的数据库安装包。在 CentOS 7 及以上的系统中使用 yum 安装 MySQL 包将无法使用 MySQL。可以选择使用完全兼容的 MariaDB，或卸载MariaDB重新安装 MySQL。</p>
<ul>
<li>检查是否安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed | grep mariadb</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416081938.png" alt=""></p>
<ul>
<li>卸载MariaDB<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove mariadb*</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="下载-MySQL-的-yum-源"><a href="#下载-MySQL-的-yum-源" class="headerlink" title="下载 MySQL 的 yum 源"></a>下载 MySQL 的 yum 源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="安装-yum-源"><a href="#安装-yum-源" class="headerlink" title="安装 yum 源"></a>安装 yum 源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql57-community-release-el7-9.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="检查-MySQL-的-yum-源是否安装成功"><a href="#检查-MySQL-的-yum-源是否安装成功" class="headerlink" title="检查 MySQL 的 yum 源是否安装成功"></a>检查 MySQL 的 yum 源是否安装成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum repolist enabled | grep <span class="string">"mysql.*-community.*"</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416082522.png" alt=""></p>
<h3 id="查看-MySQL-版本"><a href="#查看-MySQL-版本" class="headerlink" title="查看 MySQL 版本"></a>查看 MySQL 版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416082625.png" alt=""></p>
<ul>
<li>版本设置(若下载的是5.7版本的源，则跳过)<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum-<span class="built_in">config</span>-manager --<span class="keyword">disable </span>mysql56-community   <span class="comment"># 禁用MySQL5.6的源</span></span><br><span class="line"></span><br><span class="line">yum-<span class="built_in">config</span>-manager --enable mysql57-community   <span class="comment"># 启用MySQL5.7的源</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装成功：<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416082829.png" alt=""></p>
</li>
<li><p>可能出错<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/8964985a-7ebf-11e9-8c1f-00163e12a7ed.png" alt=""></p>
</li>
</ul>
<p>解决方法：</p>
<p>修改<code>vim /etc/yum.repos.d/mysql-community.repo</code>源文件“**号”部分</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysql57-community]</span><br><span class="line"><span class="attribute">name</span>=MySQL 5.7<span class="built_in"> Community </span>Server</span><br><span class="line">~~<span class="attribute">baseurl</span>=http://repo.mysql.com/yum/mysql-5.7-community/el/6/$basearch/ ~~ </span><br><span class="line">*<span class="number">*ba</span><span class="attribute">seurl</span>=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/</span><br><span class="line"><span class="attribute">enabled</span>=1**</span><br><span class="line">**<span class="attribute">gpgcheck</span>=0**</span><br><span class="line"></span><br><span class="line"><span class="attribute">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>
<h3 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<h3 id="测试连接-MySQL"><a href="#测试连接-MySQL" class="headerlink" title="测试连接 MySQL"></a>测试连接 MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure>
<p>发现出错<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416083856.png" alt=""></p>
<p>解决办法：</p>
<ul>
<li>停止 MySQL 服务：<code>systemctl stop mysqld</code></li>
<li>以不检查权限的方式启动 MySQL: <code>mysqld --user=root --skip-grant-tables &amp;</code></li>
<li>再次输入 <code>mysql -u root 或者 mysql</code>，这次就可以进来了。<br>-更新密码：<ul>
<li>MySQL 5.7 以下版本：<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'passwd12345678'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li>
<li>MySQL 5.7 版本：<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">'passwd12345678'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>刷新：<code>flush privileges;</code></li>
<li>退出：<code>exit;</code></li>
<li>重连：<code>mysql -u root -p</code>，输入密码即可连接数据库</li>
</ul>
<h3 id="防火墙设置-如果不需要，则可跳过"><a href="#防火墙设置-如果不需要，则可跳过" class="headerlink" title="防火墙设置(如果不需要，则可跳过)"></a>防火墙设置(如果不需要，则可跳过)</h3><p>开启防火墙后，远程访问 MySQL，需要开放 3306 端口</p>
<p>防火墙加入3306端口</p>
<p><code>firewall-cmd --permanent --zone=public --add-port=3306/tcp</code><br><code>firewall-cmd --permanent --zone=public --add-port=3306/udp</code><br><code>firewall-cmd --reload</code></p>
<ul>
<li>如果报错：<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416084400.png" alt=""></li>
</ul>
<p>是因为当前系统默认的是Python3环境，而firewall使用的是python2</p>
<p><strong>解决办法：</strong><br>修改文件内容，即首行指定的Python版本：</p>
<p><code>vim /usr/sbin/firewalld</code></p>
<p><code>vim /usr/bin/firewall-cmd</code></p>
<p>修改内容：</p>
<p>将<code>#!/usr/bin/python env</code>修改为<code>#!/usr/bin/python2</code></p>
<p>CentOS 7，还需要将 MySQL 服务加入防火墙，然后重启</p>
<p><code>firewall-cmd --zone=public --permanent --add-service=mysql</code></p>
<p><code>systemctl restart firewalld</code></p>
<p>如果防火墙未开启，会报错 <code>FirewallD is not running</code></p>
<p>解决方法：</p>
<ul>
<li><p>查看防火墙状态：会发现状态是 dead，即防火墙未开启。</p>
<p> <code>systemctl status firewalld</code></p>
</li>
<li><p>打开防火墙：</p>
<p> <code>systemctl start firewalld</code></p>
</li>
<li><p>再次查看防火墙状态：这时会发现状态变为 running，即防火墙开启成功。</p>
<p> <code>systemctl status firewalld</code></p>
</li>
</ul>
<h3 id="设置允许远程访问-如果项目需要，否则跳过"><a href="#设置允许远程访问-如果项目需要，否则跳过" class="headerlink" title="设置允许远程访问(如果项目需要，否则跳过)"></a>设置允许远程访问(如果项目需要，否则跳过)</h3><ul>
<li><p>连接数据库：<code>mysql -uroot -p</code></p>
</li>
<li><p>授权任意ip访问：<code>grant all privileges on *.* to root@&quot;%&quot; identified by &#39;0&#39;;</code></p>
<ul>
<li><p>若出现错误：<br><img src="https://cdn.jsdelivr.net/gh/iotwd/imgHosting/cmdxy-pic/20200416085445.png" alt=""></p>
</li>
<li><p>解决方法：</p>
<p><code>mysql&gt; SET PASSWORD = PASSWORD(&#39;your_new_password&#39;);</code></p>
</li>
</ul>
</li>
<li><p>刷新权限：<code>flush privileges;</code></p>
</li>
</ul>
<p>MySQL 默认只允许 root 帐户在本地登录，如果要在其它机器上连接 MySQL，必须修改 root 允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，添加一个新的帐户：</p>
<p><code>GRANT ALL PRIVILEGES ON *.* TO &#39;admin&#39;@&#39;%&#39; IDENTIFIED BY &#39;passwd&#39; WITH GRANT OPTION;TION;</code></p>
<h3 id="MySQL-相关命令"><a href="#MySQL-相关命令" class="headerlink" title="MySQL 相关命令"></a>MySQL 相关命令</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld    #启动mysql</span><br><span class="line">systemctl stop mysqld    #停止mysqld</span><br><span class="line">systemctl restart mysqld    #重启mysqld</span><br><span class="line">systemctl <span class="builtin-name">enable</span> mysqld    #设置开机启动</span><br><span class="line">systemctl status mysqld    #查看 MySQL<span class="built_in"> Server </span>状态</span><br></pre></td></tr></table></figure>

<p>参考资料：<a href="https://www.aitolearn.com/article/9e3ebcc4703e4b36a231ee8448da0475" target="_blank" rel="noopener">CentOS7安装Mysql 5.7</a></p>
<h2 id="打包web项目"><a href="#打包web项目" class="headerlink" title="打包web项目"></a>打包web项目</h2><ul>
<li><p>先修改jdbc.properties文件的url 为下面的。将192.168.44.128换成服务器ip</p>
 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=jdbc:mysql://<span class="number">192.168</span>.<span class="number">44.128</span>:<span class="number">3306</span>/further?useUnicode=<span class="literal">yes</span>&amp;</span><br><span class="line"><span class="attr">characterEncoding</span>=utf8</span><br></pre></td></tr></table></figure>
</li>
<li><p>Project-&gt;Artifacts-&gt;增加webApplication:Exploded 选在项目基础上</p>
</li>
<li><p>Project-&gt;Artifacts-&gt;增加webApplication:Archive 选在2的基础上</p>
</li>
<li><p>发现有Create Manifest的提示。点击，默认创建即可。然后点击apply和ok</p>
</li>
<li><p>重新build项目。Build-&gt;Build Artifacts-&gt;All Artifacts-&gt;build</p>
</li>
<li><p>创建好后进入项目文件夹out/artifacts/项目名_war/</p>
</li>
<li><p>将.war文件传至服务器的/usr/locol/tomcat/webapps下。进入服务器后重启tomcat会自动解压</p>
</li>
<li><p>访问http://服务器ip:8080/项目名</p>
</li>
</ul>
<p><strong>这个时候我们所写的项目已成功部署，可以通过浏览器输入服务器的ip地址访问了。若想通过域名访问需要到服务器控制台将域名解析到我们的服务器。</strong></p>
]]></content>
      <categories>
        <category>Java web</category>
      </categories>
      <tags>
        <tag>Java Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本语法</title>
    <url>/posts/markdown-programmer.html</url>
    <content><![CDATA[<ul>
<li><p>Markdown是什么？</p>
<p> Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。<br>Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。</p>
</li>
</ul>
<a id="more"></a>

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2><p>在想要设为标题的文字前加#，一个#是一级标题，两个#是二级标题，以此类推，共支持六级标题。<br><strong>注意：</strong>标准语法需要在#后加一个空格。</p>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a><strong>字体</strong></h2><p><strong>加粗</strong></p>
<p>要加粗的文字左右分别加<strong>2</strong>个*</p>
<p><strong>斜体</strong></p>
<p>要倾斜的文字左右分别加<strong>1</strong>个*</p>
<p><strong>斜体加粗</strong></p>
<p>要倾斜和加粗的文字左右分部加<strong>3</strong>个* </p>
<p><strong>删除线</strong></p>
<p>要加删除线的文字左右分别加<strong>2</strong>个~</p>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**文字加粗**</span></span><br><span class="line"><span class="emphasis">*文字倾斜*</span></span><br><span class="line"><span class="strong">***文字加粗倾斜**</span>*</span><br><span class="line">~~文字加删除线~~</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><strong>文字加粗</strong><br><em>文字倾斜</em><br><strong><em>文字加粗倾斜</em></strong><br><del>文字加删除线</del></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h2><p>在引用的文字前面加&gt;即可。引用可以嵌套。</p>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 愈艰难，就愈要做。改革，想来是没有一帆风顺的。 -鲁迅</span></span><br><span class="line">&gt;&gt; 读书应自己思索，自己做主。 -鲁迅</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>愈艰难，就愈要做。改革，想来是没有一帆风顺的。 -鲁迅</p>
<blockquote>
<p>读书应自己思索，自己做主。 -鲁迅</p>
</blockquote>
</blockquote>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><strong>分割线</strong></h2><p>三个以上的-或者*<br>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="emphasis">***</span>*</span><br></pre></td></tr></table></figure>
<h2 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h2><hr>
<hr>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h2><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片下方文字</span>](<span class="link">图片地址 "图片标题"</span>)</span><br><span class="line">[]内填的文字等于对图片内容的解释，图片标题当鼠标移到图片上时会显示内容，可加可不加</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">i love markdown</span>](<span class="link">https://cn.bing.com/th?id=OIP.KLvPfJ6Ui3cZQd4Zj17kJgHaE8&amp;pid=Api&amp;rs=1 "Bing photo"</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><img src="http://mikemclin.net/mmwp/wp-content/uploads/2013/03/markdown-syntax-language.png" alt="i love markdown" title="Bing photo"></p>
<p><strong>超链接</strong></p>
<p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">超链接名</span>](<span class="link">超链接地址"超链接标题"</span>)</span><br><span class="line">标题可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">markdown语法说明</span>](<span class="link">http://www.markdown.cn/"语法说明"</span>)</span><br><span class="line">[<span class="string">Google</span>](<span class="link">google.com"Google"</span>)</span><br><span class="line">标题可加可不加</span><br></pre></td></tr></table></figure>

<p>效果如下：<br><a href="http://www.markdown.cn/" target="_blank" rel="noopener"语法说明"">markdown语法说明</a></p>
<p><a href="google.com"Google"">Google</a></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h2><ul>
<li>无序列表</li>
</ul>
<p>语法：</p>
<p>无序列表用 -  + * 任何一个都可以</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>- 列表内容</span><br><span class="line"><span class="bullet">2. </span>+ 列表内容</span><br><span class="line"><span class="bullet">3. </span>* 列表内容</span><br><span class="line"><span class="strong">**注意**</span> - 符号后需要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>有序列表</li>
</ul>
<p>语法：数字加点</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>列表内容</span><br><span class="line"><span class="bullet">2. </span>列表内容</span><br><span class="line"><span class="bullet">3. </span>列表内容</span><br><span class="line"><span class="strong">**注意:**</span> 序号后需要一个空格。回车会自动增加序号</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<ul>
<li>列表嵌套</li>
</ul>
<p><strong>上一级和下一级之间加三个空格即可</strong><br>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>一级无序列表</span><br><span class="line"><span class="bullet">   - </span>二级无序列表 </span><br><span class="line"><span class="bullet">   - </span>二级无序列表</span><br><span class="line"><span class="bullet">   - </span>二级无序列表</span><br><span class="line"><span class="bullet">- </span>一级无序列表</span><br><span class="line"><span class="bullet">   - </span>二级无序列表</span><br><span class="line"><span class="bullet">   - </span>二级无序列表</span><br><span class="line"><span class="bullet">      - </span>三级无序列表</span><br><span class="line"><span class="bullet">      - </span>三级无序列表</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>一级有序列表</span><br><span class="line"><span class="bullet">   1. </span>二级有序列表</span><br><span class="line"><span class="bullet">   2. </span>二级有序列表</span><br><span class="line"><span class="code">      1.三级有序列表</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>一级无序列表<ul>
<li>二级无序列表 </li>
<li>二级无序列表</li>
<li>二级无序列表</li>
</ul>
</li>
<li>一级无序列表<ul>
<li>二级无序列表</li>
<li>二级无序列表<ul>
<li>三级无序列表</li>
<li>三级无序列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>一级有序列表<ol>
<li>二级有序列表</li>
<li>二级有序列表<ol>
<li>三级有序列表</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>语法：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|--:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>文字默认居左</span><br><span class="line"><span class="bullet">- </span>两边加:表示居中</span><br><span class="line"><span class="bullet">- </span>右边加:表示居右</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 时间 | 周日 | 周一 | 周二 | 周三 | 周四 | 周五 | 周六 |</span><br><span class="line">| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |</span><br><span class="line">| 6:00 | 休息 |   数 | 数   | 数   | 数   | 数   | 休息 |</span><br><span class="line">| 8:00 | 休息 |   数 | 数   | 数   | 数   | 数   | 休息 |</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>周日</th>
<th>周一</th>
<th>周二</th>
<th>周三</th>
<th>周四</th>
<th>周五</th>
<th>周六</th>
</tr>
</thead>
<tbody><tr>
<td>6:00</td>
<td>休息</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>休息</td>
</tr>
<tr>
<td>8:00</td>
<td>休息</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>数</td>
<td>休息</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><p>语法：</p>
<p>单行代码：代码两边各一个单引号</p>
<p><code>$rm -rf /*</code></p>
<p>代码块：代码两边各三个单引号</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="待办"><a href="#待办" class="headerlink" title="待办"></a><strong>待办</strong></h2><p>语法：<br>-空格[空格]空格 代办事项<br>-空格[x]空格 已完成事项<br>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 吃饭</span><br><span class="line"><span class="bullet">- </span>[x] 学习</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li><input disabled="" type="checkbox"> 吃饭</li>
<li><input checked="" disabled="" type="checkbox"> 学习</li>
</ul>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
